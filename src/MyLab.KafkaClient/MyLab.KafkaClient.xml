<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLab.KafkaClient</name>
    </assembly>
    <members>
        <member name="T:MyLab.KafkaClient.ConsumerConfigEx">
            <summary>
            Extended base consumer configuration based on <see cref="T:Confluent.Kafka.ConsumerConfig"/>
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.ConsumerConfigEx.ErrorBasedRetryIntervalMs">
            <summary>
            An idle interval (before next try) after unhandled exception
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.ConsumerConfigEx.#ctor(Confluent.Kafka.ClientConfig)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.ConsumerConfigEx"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.ConsumerConfigEx.#ctor(Confluent.Kafka.ConsumerConfig)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.ConsumerConfigEx"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.ConsumerConfigEx.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.ConsumerConfigEx"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.ConsumingContext.#ctor(System.IServiceProvider,Confluent.Kafka.ConsumeResult{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Consume.ConsumingContext"/>
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IConsumingContext">
            <summary>
            Contains tools for event consuming
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IConsumingContext.CreateLogic``2">
            <summary>
            Creates logic
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IConsumingContext.ProvideEvent``1">
            <summary>
            Provides incoming Kafka event
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IKafkaConsumer">
            <summary>
            Defines Kafka consumer
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IKafkaConsumer.TopicName">
            <summary>
            Target topic 
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IKafkaConsumer.ConsumeAsync(MyLab.KafkaClient.Consume.IConsumingContext,System.Threading.CancellationToken)">
            <summary>
            Consumes incoming event 
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IKafkaConsumerFactory">
            <summary>
            Creates Kafka consumers
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IKafkaConsumerFactory.Create(System.IServiceProvider)">
            <summary>
            Creates Kafka consumer uses registered services
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IKafkaConsumerLogic`1">
            <summary>
            Defines consumer logic
            </summary>
            <typeparam name="TEventContent">incoming message content type</typeparam>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IKafkaConsumerLogic`1.ConsumeAsync(MyLab.KafkaClient.Consume.IncomingKafkaEvent{`0})">
            <summary>
            Consumes incoming event
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1">
            <summary>
            Defines consumed event
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.Headers">
            <summary>
            The collection of message headers (or null). Specifying null or an empty list are equivalent. The order of headers is maintained, and duplicate header keys are allowed.
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.IsPartitionEof">
            <summary>
            True if this instance represents an end of partition event, false if it represents a message in kafka.
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.TopicPartitionOffset">
            <summary>
            The TopicPartitionOffset associated with the message.
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.Content">
            <summary>
            Event content
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.Key">
            <summary>
            The Kafka message Key
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1.#ctor(Confluent.Kafka.ConsumeResult{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Consume.IncomingKafkaEvent`1"/>
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.KafkaConsumer`2">
            <summary>
            Consumes Kafka events
            </summary>
            <typeparam name="TLogic">logic type</typeparam>
            <typeparam name="TEventContent">event content type</typeparam>
        </member>
        <member name="P:MyLab.KafkaClient.Consume.KafkaConsumer`2.TopicName">
            <summary>
            Target topic 
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumer`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Consume.KafkaConsumer`2"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumer`2.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Consume.KafkaConsumer`2"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumer`2.ConsumeAsync(MyLab.KafkaClient.Consume.IConsumingContext,System.Threading.CancellationToken)">
            <summary>
            Consumes incoming event 
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.KafkaConsumerRegistrar">
            <summary>
            Registers Kafka consumer factories
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumerRegistrar.Add(MyLab.KafkaClient.Consume.IKafkaConsumerFactory)">
            <summary>
            Registers new consumer factory
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.KafkaConsumerRegistrarExtensions">
            <summary>
            Extensions for <see cref="T:MyLab.KafkaClient.Consume.KafkaConsumerRegistrar"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumerRegistrarExtensions.Add``1(MyLab.KafkaClient.Consume.KafkaConsumerRegistrar,System.Func{``0,MyLab.KafkaClient.Consume.IKafkaConsumer})">
            <summary>
            Registers consumer factory based on options 
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumerRegistrarExtensions.Add``2(MyLab.KafkaClient.Consume.KafkaConsumerRegistrar,System.Func{``0,``1},System.Func{``1,MyLab.KafkaClient.Consume.IKafkaConsumer})">
            <summary>
            Registers consumer factory based on options field
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumerRegistrarExtensions.Add(MyLab.KafkaClient.Consume.KafkaConsumerRegistrar,MyLab.KafkaClient.Consume.IKafkaConsumer)">
            <summary>
            Registers consumer
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.KafkaConsumerRegistrarExtensions.Add``1(MyLab.KafkaClient.Consume.KafkaConsumerRegistrar)">
            <summary>
            Registers consumer type
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Consume.IKafkaEventAccessor">
            <summary>
            Gets access to scoped incoming Kafka event
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Consume.IKafkaEventAccessor.GetScopedIncomingEvent``1">
            <summary>
            Gets scoped event consuming result
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.HeaderExtensions">
            <summary>
            Extensions for <see cref="T:Confluent.Kafka.Header"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.HeaderExtensions.ToStringValue(Confluent.Kafka.Header)">
            <summary>
            Converts header value to string
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.HeaderExtensions.ToObject``1(Confluent.Kafka.Header)">
            <summary>
            Converts header value to object
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.HeadersExtensions">
            <summary>
            Extensions for <see cref="T:Confluent.Kafka.Headers"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.HeadersExtensions.Add(Confluent.Kafka.Headers,System.String,System.Object)">
            <summary>
            Append a new header to the collection
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.HeadersExtensions.Add(Confluent.Kafka.Headers,System.String,System.String)">
            <summary>
            Append a new header to the collection
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.IAdminConfigProvider">
            <summary>
            Provides Kafka admin config
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IAdminConfigProvider.ProvideAdminConfig">
            <summary>
            Provides admin config
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.IConsumerConfigProvider">
            <summary>
            Provides Kafka consumer config
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IConsumerConfigProvider.ProvideConsumerConfig">
            <summary>
            Provides consumer config
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.IKafkaLog">
            <summary>
            Collect kafka communications
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IKafkaLog.ReportConsuming(Confluent.Kafka.ConsumeResult{System.String,System.String})">
            <summary>
            Reports about success consuming
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IKafkaLog.ReportProducing(Confluent.Kafka.DeliveryResult{System.String,System.String})">
            <summary>
            Report about success producing
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IKafkaLog.ReportProducingError(Confluent.Kafka.ProduceException{System.String,System.String})">
            <summary>
            Report about producing error
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IKafkaLog.ReportConsumingError(Confluent.Kafka.ConsumeException)">
            <summary>
            Report about consuming error
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.IKafkaLogWriter">
            <summary>
            Writes log into string output
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IKafkaLogWriter.WriteLine(System.String)">
            <summary>
            Writes log line
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.IProducerConfigProvider">
            <summary>
            Provides Kafka producer config
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.IProducerConfigProvider.ProvideProducerConfig">
            <summary>
            Provides producer config
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.KafkaConfigProvider">
            <summary>
            Provides Kafka configurations
            </summary>
        </member>
        <member name="F:MyLab.KafkaClient.KafkaConfigProvider.DefaultCommonSectionName">
            <summary>
            Default section name for base properties
            </summary>
        </member>
        <member name="F:MyLab.KafkaClient.KafkaConfigProvider.DefaultAdminSectionName">
            <summary>
            Default section name for admin properties
            </summary>
        </member>
        <member name="F:MyLab.KafkaClient.KafkaConfigProvider.DefaultProduceSectionName">
            <summary>
            Default section name for producer properties
            </summary>
        </member>
        <member name="F:MyLab.KafkaClient.KafkaConfigProvider.DefaultConsumeSectionName">
            <summary>
            Default section name for consumer properties
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.KafkaConfigProvider.CommonSectionName">
            <summary>
            Section name for base properties
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.KafkaConfigProvider.AdminSectionName">
            <summary>
            Section name for admin properties
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.KafkaConfigProvider.ProduceSectionName">
            <summary>
            Section name for producer properties
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.KafkaConfigProvider.ConsumeSectionName">
            <summary>
            Section name for consumer properties
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaConfigProvider.#ctor(System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.KafkaConfigProvider"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaConfigProvider.ProvideAdminConfig">
            <summary>
            Provides admin config
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaConfigProvider.ProvideProducerConfig">
            <summary>
            Provides producer config
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaConfigProvider.ProvideConsumerConfig">
            <summary>
            Provides consumer config
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.KafkaToolsIntegration">
            <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to integrate Kafka tools
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaToolsIntegration.AddKafkaProducer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds Kafka producing tools into application
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaToolsIntegration.AddKafkaConsuming(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MyLab.KafkaClient.Consume.KafkaConsumerRegistrar})">
            <summary>
            Adds Kafka consuming tools into application 
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaToolsIntegration.ConfigureKafkaTools(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Configure Kafka tools
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaToolsIntegration.ConfigureKafkaTools(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.KafkaClient.KafkaConfigProvider)">
            <summary>
            Configure Kafka tools
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaToolsIntegration.ConfigureKafkaTools(Microsoft.Extensions.DependencyInjection.IServiceCollection,MyLab.KafkaClient.IProducerConfigProvider,MyLab.KafkaClient.IConsumerConfigProvider,MyLab.KafkaClient.IAdminConfigProvider)">
            <summary>
            Configure Kafka tools
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.KafkaTopicAttribute">
            <summary>
            Defines topic name for kafka event model
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.KafkaTopicAttribute.TopicName">
            <summary>
            Gets target topic name
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.KafkaTopicAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.KafkaTopicAttribute"/>
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.IKafkaEventHeadersProvider">
            <summary>
            Defines Kafka event model which provides event headers
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.IKafkaEventHeadersProvider.ProvideHeaders(Confluent.Kafka.Headers)">
            <summary>
            Adds headers into specified collection
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.IKafkaEventKayProvider">
            <summary>
            Defines Kafka event model which provides event key
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.IKafkaEventKayProvider.ProvideKey">
            <summary>
            Provides Kafka event key
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.IKafkaProducer">
            <summary>
            Publish events to Kafka
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.IKafkaProducer.ProduceAsync(MyLab.KafkaClient.Produce.OutgoingKafkaEvent,System.Threading.CancellationToken)">
            <summary>
            Publish event to Kafka
            </summary>
            <exception cref="T:MyLab.KafkaClient.Produce.KafkaProduceException">Producing error</exception>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.KafkaProduceException">
            <summary>
            Throws when producing exception
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.KafkaProducerExtensions">
            <summary>
            Extensions for <see cref="T:MyLab.KafkaClient.Produce.IKafkaProducer"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.KafkaProducerExtensions.ProduceAsync(MyLab.KafkaClient.Produce.IKafkaProducer,System.Object,System.Threading.CancellationToken)">
            <summary>
            Publish event to Kafka
            </summary>
            <exception cref="T:MyLab.KafkaClient.Produce.KafkaProduceException">Producing error</exception>
        </member>
        <member name="T:MyLab.KafkaClient.Produce.OutgoingKafkaEvent">
            <summary>
            Defines produced event
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.Target">
            <summary>
            Specifies topic and partition for publishing
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.Headers">
            <summary>
            Specifies event headers
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.Key">
            <summary>
            Specifies event key
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.Content">
            <summary>
            Content
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Produce.OutgoingKafkaEvent"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.GetTarget">
            <summary>
            Gets evaluated <see cref="T:Confluent.Kafka.TopicPartition"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Produce.OutgoingKafkaEvent.ToNativeMessage">
            <summary>
            Creates <see cref="T:Confluent.Kafka.Message`2"/> from contained properties
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.StringKafkaLog.#ctor(MyLab.KafkaClient.IKafkaLogWriter)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.StringKafkaLog"/>
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Test.KafkaFixture">
            <summary>
            Provides abilities to work with kafka for testing
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaFixture.CreateTopicFactory(Confluent.Kafka.ClientConfig,System.String,MyLab.KafkaClient.IKafkaLog)">
            <summary>
            Creates new topic factory for specified configuration
            </summary>
        </member>
        <member name="T:MyLab.KafkaClient.Test.KafkaTopic">
            <summary>
            Represent Kafka topic
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Test.KafkaTopic.Name">
            <summary>
            Topic name
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Test.KafkaTopic.Log">
            <summary>
            Gets or sets Kafka communications log
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.#ctor(System.String,Confluent.Kafka.IAdminClient,Confluent.Kafka.ClientConfig)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Test.KafkaTopic"/>
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.Exists">
            <summary>
            Gets true if topic exists
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.ProduceAsync(System.String)">
            <summary>
            Produces event with specified content
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.ProduceAsync(Confluent.Kafka.Message{System.String,System.String})">
            <summary>
            Produces event with specified message
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.ConsumeOne(System.TimeSpan)">
            <summary>
            Consumes next one event
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.ProvideConsumer">
            <summary>
            Provides inner consumer
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopic.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:MyLab.KafkaClient.Test.KafkaTopicFactory">
            <summary>
            Creates Kafka topics
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Test.KafkaTopicFactory.TopicNamePrefix">
            <summary>
            Adds prefix for topic name if create with Id and random Id
            </summary>
        </member>
        <member name="P:MyLab.KafkaClient.Test.KafkaTopicFactory.Log">
            <summary>
            Gets or sets Kafka communications log
            </summary>
        </member>
        <member name="M:MyLab.KafkaClient.Test.KafkaTopicFactory.#ctor(Confluent.Kafka.IAdminClient,Confluent.Kafka.ClientConfig)">
            <summary>
            Initializes a new instance of <see cref="T:MyLab.KafkaClient.Test.KafkaTopicFactory"/>
            </summary>
        </member>
    </members>
</doc>
